from schemas import BookCreateSchema, BookResponseSchema, UpdateBookSchema
from sqlalchemy.ext.asyncio import AsyncSession
from fastapi import Depends, HTTPException
from database import get_session_db
from sqlalchemy import select, update
from models import BookOrm, AuthorOrm
from schemas import AuthorCreateSchema, AuthorResponseSchema
from sqlalchemy.orm import selectinload


async def create_book_db(
    book: BookCreateSchema, session: AsyncSession = Depends(get_session_db)
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–≤—Ç–æ—Ä–∞
    stmt = select(AuthorOrm).where(AuthorOrm.id == book.author_id)
    result = await session.execute(stmt)
    author = result.scalars().first()
    if author is None:
        raise HTTPException(status_code=404, detail="–ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∞–≤—Ç–æ—Ä—É
    new_book = BookOrm(**book.model_dump())  # Pydantic ‚Üí ORM
    session.add(new_book)
    await session.commit()
    await session.refresh(new_book)
    return BookResponseSchema.model_validate(new_book.__dict__)


async def get_all_books_db(session: AsyncSession = Depends(get_session_db)):
    stmt = select(BookOrm).order_by(BookOrm.id).options(selectinload(BookOrm.author))
    # –ö–æ–≥–¥–∞ —Ç—ã –≤—ã–ø–æ–ª–Ω—è–µ—à—å session.execute(stmt), SQLAlchemy –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (Result),
    # –Ω–æ –Ω–µ —Å–∞–º–∏ –æ–±—ä–µ–∫—Ç—ã BookOrm.
    # scalars() –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã BookOrm, –∞ –Ω–µ —Å—ã—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ SQL.
    # üìå –ë–µ–∑ .scalars() —Ç—ã –±—ã –ø–æ–ª—É—á–∏–ª —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π, –∞ –Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤.
    result = await session.execute(stmt)
    books = result.scalars().all()
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç BookOrm –≤ Pydantic –º–æ–¥–µ–ª—å
    return [BookResponseSchema.model_validate(book.__dict__) for book in books]


async def get_book_by_id_db(
    book_id: int, session: AsyncSession = Depends(get_session_db)
):
    stmt = (
        select(BookOrm)
        .where(BookOrm.id == book_id)
        .options(selectinload(BookOrm.author))
    )
    result = await session.execute(stmt)
    book = result.scalars().first()
    if book is None:
        raise HTTPException(status_code=404, detail="–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return BookResponseSchema.model_validate(book.__dict__)


async def delete_book_db(
    book_id: int, session: AsyncSession = Depends(get_session_db)
) -> None:
    result = result = await session.get(BookOrm, book_id)
    await session.delete(result)
    await session.commit()


async def update_book_db(
    update_book: UpdateBookSchema,
    book_id: int,
    session: AsyncSession = Depends(get_session_db),
):
    stmt = (
        select(BookOrm)
        .where(BookOrm.id == book_id)
        .options(selectinload(BookOrm.author))
    )
    result = await session.execute(stmt)
    book = result.scalars().first()

    if book is None:
        raise HTTPException(status_code=404, detail="–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if update_book.title is not None:
        book.title = update_book.title
    if update_book.author_id is not None:
        book.author_id = update_book.author_id
    if update_book.year is not None:
        book.year = update_book.year

    await session.commit()
    await session.refresh(book)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ORM-–æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–º–æ—â—å—é __dict__
    return BookResponseSchema.model_validate(book.__dict__)


async def create_author_db(
    author: AuthorCreateSchema, session: AsyncSession = Depends(get_session_db)
):
    new_author = AuthorOrm(**author.model_dump())  # Pydantic ‚Üí ORM
    session.add(new_author)
    await session.commit()
    await session.refresh(new_author)
    return new_author


async def get_all_authors_db(session: AsyncSession = Depends(get_session_db)):
    stmt = (
        select(AuthorOrm).order_by(AuthorOrm.id).options(selectinload(AuthorOrm.books))
    )
    result = await session.execute(stmt)
    all_books = result.scalars().all()
    return all_books


async def get_author_by_id_db(
    author_id: int, session: AsyncSession = Depends(get_session_db)
):
    stmt = (
        select(AuthorOrm)
        .where(AuthorOrm.id == author_id)
        .options(selectinload(AuthorOrm.books))
    )
    result = await session.execute(stmt)
    author = result.scalars().first()
    if author is None:
        raise HTTPException(status_code=404, detail="–ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return author


async def delete_author_db(
    author_id: int, session: AsyncSession = Depends(get_session_db)
) -> None:
    author = await session.get(AuthorOrm, author_id)
    if author:
        await session.delete(author)
        await session.commit()
    else:
        raise HTTPException(status_code=404, detail="–ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")


# async def update_author_db(
#     name: str, author_id: int, session: AsyncSession = Depends(get_session_db)
# ):
#     author = update(AuthorOrm).where(AuthorOrm.id == author_id).values(name=name)
#     await session.execute(author)
#     await session.commit()
#     if author is None:
#         raise HTTPException(status_code=404, detail="–ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
#     return AuthorCreateSchema.model_validate(author.__dict__)


async def update_author_db(
    name: str, author_id: int, session: AsyncSession = Depends(get_session_db)
):
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    result = await session.execute(
        update(AuthorOrm).where(AuthorOrm.id == author_id).values(name=name)
    )
    await session.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏
    if result.rowcount == 0:
        raise HTTPException(status_code=404, detail="–ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
    updated_author = await session.get(AuthorOrm, author_id)

    # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ Pydantic –º–æ–¥–µ–ª—å
    if updated_author:
        return AuthorCreateSchema(name=updated_author.name)
    else:
        raise HTTPException(status_code=404, detail="–ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
